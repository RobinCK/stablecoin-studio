/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  StableCoinFactoryProxy,
  StableCoinFactoryProxyInterface,
} from "../../contracts/StableCoinFactoryProxy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_logic",
        type: "address",
      },
      {
        internalType: "address",
        name: "admin_",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "admin_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "changeAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getImplementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "implementation_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405260405162000e8838038062000e88833981016040819052620000269162000465565b81816040518060200160405280600081525082816200004e828260006200006760201b60201c565b506200005c905082620000a4565b50505050506200051f565b6200007283620000ff565b600082511180620000805750805b156200009f576200009d83836200014160201b6200029a1760201c565b505b505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f620000cf62000170565b604080516001600160a01b03928316815291841660208301520160405180910390a1620000fc81620001a9565b50565b6200010a816200025e565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606062000169838360405180606001604052806027815260200162000e616027913962000312565b9392505050565b60006200019a60008051602062000e4183398151915260001b620003f860201b620002381760201c565b546001600160a01b0316919050565b6001600160a01b038116620002145760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201526564647265737360d01b60648201526084015b60405180910390fd5b806200023d60008051602062000e4183398151915260001b620003f860201b620002381760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6200027481620003fb60201b620002c61760201c565b620002d85760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084016200020b565b806200023d7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b620003f860201b620002381760201c565b60606001600160a01b0384163b6200037c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b60648201526084016200020b565b600080856001600160a01b031685604051620003999190620004cc565b600060405180830381855af49150503d8060008114620003d6576040519150601f19603f3d011682016040523d82523d6000602084013e620003db565b606091505b509092509050620003ee8282866200040a565b9695505050505050565b90565b6001600160a01b03163b151590565b606083156200041b57508162000169565b8251156200042c5782518084602001fd5b8160405162461bcd60e51b81526004016200020b9190620004ea565b80516001600160a01b03811681146200046057600080fd5b919050565b600080604083850312156200047957600080fd5b620004848362000448565b9150620004946020840162000448565b90509250929050565b60005b83811015620004ba578181015183820152602001620004a0565b838111156200009d5750506000910152565b60008251620004e08184602087016200049d565b9190910192915050565b60208152600082518060208401526200050b8160408501602087016200049d565b601f01601f19169190910160400192915050565b610912806200052f6000396000f3fe6080604052600436106100695760003560e01c80638f283970116100435780638f283970146100e4578063aaf10f4214610104578063f851a4401461011957610078565b80633659cfe6146100805780634f1ef286146100a05780635c60da1b146100b357610078565b366100785761007661012e565b005b61007661012e565b34801561008c57600080fd5b5061007661009b36600461079c565b610148565b6100766100ae3660046107b7565b61018f565b3480156100bf57600080fd5b506100c8610200565b6040516001600160a01b03909116815260200160405180910390f35b3480156100f057600080fd5b506100766100ff36600461079c565b61023b565b34801561011057600080fd5b506100c8610265565b34801561012557600080fd5b506100c861026f565b6101366102d5565b61014661014161038f565b610399565b565b6101506103bd565b6001600160a01b0316336001600160a01b0316141561018757610184816040518060200160405280600081525060006103f0565b50565b61018461012e565b6101976103bd565b6001600160a01b0316336001600160a01b031614156101f8576101f38383838080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250600192506103f0915050565b505050565b6101f361012e565b600061020a6103bd565b6001600160a01b0316336001600160a01b031614156102305761022b61038f565b905090565b61023861012e565b90565b6102436103bd565b6001600160a01b0316336001600160a01b03161415610187576101848161041b565b600061022b61038f565b60006102796103bd565b6001600160a01b0316336001600160a01b031614156102305761022b6103bd565b60606102bf83836040518060600160405280602781526020016108b66027913961046f565b9392505050565b6001600160a01b03163b151590565b6102dd6103bd565b6001600160a01b0316336001600160a01b031614156101465760405162461bcd60e51b815260206004820152604260248201527f5472616e73706172656e745570677261646561626c6550726f78793a2061646d60448201527f696e2063616e6e6f742066616c6c6261636b20746f2070726f7879207461726760648201527f6574000000000000000000000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b600061022b610563565b3660008037600080366000845af43d6000803e8080156103b8573d6000f35b3d6000fd5b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b546001600160a01b0316919050565b6103f98361058b565b6000825111806104065750805b156101f357610415838361029a565b50505050565b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6104446103bd565b604080516001600160a01b03928316815291841660208301520160405180910390a1610184816105cb565b60606001600160a01b0384163b6104ee5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152608401610386565b600080856001600160a01b0316856040516105099190610866565b600060405180830381855af49150503d8060008114610544576040519150601f19603f3d011682016040523d82523d6000602084013e610549565b606091505b50915091506105598282866106a3565b9695505050505050565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc6103e1565b610594816106dc565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6001600160a01b0381166106475760405162461bcd60e51b815260206004820152602660248201527f455243313936373a206e65772061646d696e20697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610386565b807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035b80547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b039290921691909117905550565b606083156106b25750816102bf565b8251156106c25782518084602001fd5b8160405162461bcd60e51b81526004016103869190610882565b6001600160a01b0381163b6107595760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e7472616374000000000000000000000000000000000000006064820152608401610386565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc61066a565b80356001600160a01b038116811461079757600080fd5b919050565b6000602082840312156107ae57600080fd5b6102bf82610780565b6000806000604084860312156107cc57600080fd5b6107d584610780565b9250602084013567ffffffffffffffff808211156107f257600080fd5b818601915086601f83011261080657600080fd5b81358181111561081557600080fd5b87602082850101111561082757600080fd5b6020830194508093505050509250925092565b60005b8381101561085557818101518382015260200161083d565b838111156104155750506000910152565b6000825161087881846020870161083a565b9190910192915050565b60208152600082518060208401526108a181604085016020870161083a565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220ca5c50f6b16fe3c53c0c669b73d77fe923c17d19210886f63d3633b8a07cef1164736f6c634300080a0033b53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564";

type StableCoinFactoryProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: StableCoinFactoryProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class StableCoinFactoryProxy__factory extends ContractFactory {
  constructor(...args: StableCoinFactoryProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _logic: PromiseOrValue<string>,
    admin_: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<StableCoinFactoryProxy> {
    return super.deploy(
      _logic,
      admin_,
      overrides || {}
    ) as Promise<StableCoinFactoryProxy>;
  }
  override getDeployTransaction(
    _logic: PromiseOrValue<string>,
    admin_: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_logic, admin_, overrides || {});
  }
  override attach(address: string): StableCoinFactoryProxy {
    return super.attach(address) as StableCoinFactoryProxy;
  }
  override connect(signer: Signer): StableCoinFactoryProxy__factory {
    return super.connect(signer) as StableCoinFactoryProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): StableCoinFactoryProxyInterface {
    return new utils.Interface(_abi) as StableCoinFactoryProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): StableCoinFactoryProxy {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as StableCoinFactoryProxy;
  }
}
