/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface IFreezableInterface extends utils.Interface {
  functions: {
    "freeze(address)": FunctionFragment;
    "unfreeze(address)": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "freeze" | "unfreeze"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "freeze",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unfreeze",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "freeze", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unfreeze", data: BytesLike): Result;

  events: {
    "TransfersFreezed(address,address)": EventFragment;
    "TransfersUnfreezed(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TransfersFreezed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransfersUnfreezed"): EventFragment;
}

export interface TransfersFreezedEventObject {
  token: string;
  account: string;
}
export type TransfersFreezedEvent = TypedEvent<
  [string, string],
  TransfersFreezedEventObject
>;

export type TransfersFreezedEventFilter =
  TypedEventFilter<TransfersFreezedEvent>;

export interface TransfersUnfreezedEventObject {
  token: string;
  account: string;
}
export type TransfersUnfreezedEvent = TypedEvent<
  [string, string],
  TransfersUnfreezedEventObject
>;

export type TransfersUnfreezedEventFilter =
  TypedEventFilter<TransfersUnfreezedEvent>;

export interface IFreezable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFreezableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    freeze(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unfreeze(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  freeze(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unfreeze(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    freeze(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unfreeze(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "TransfersFreezed(address,address)"(
      token?: null,
      account?: null
    ): TransfersFreezedEventFilter;
    TransfersFreezed(token?: null, account?: null): TransfersFreezedEventFilter;

    "TransfersUnfreezed(address,address)"(
      token?: null,
      account?: null
    ): TransfersUnfreezedEventFilter;
    TransfersUnfreezed(
      token?: null,
      account?: null
    ): TransfersUnfreezedEventFilter;
  };

  estimateGas: {
    freeze(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unfreeze(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    freeze(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unfreeze(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
